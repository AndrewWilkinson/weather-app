{"version":3,"sources":["Day.js","Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["Day","props","ending","dayDate","toString","slice","Card","style","width","Body","dayName","dayForecast","temp","max","min","wind_speed","weather","main","Forecast","date","Date","displayForecast","forecast","map","day","dayIndex","getDate","nextEightDayNames","chosenCity","Container","dayNames","eightDayNames","getDay","concat","App","useState","setValue","changeWeather","changeFetching","responseStatusCheck","responseObject","status","Promise","resolve","reject","Error","statusText","refreshWeather","axios","get","cities","lat","lon","then","jsonResponse","data","catch","error","console","log","finally","state","useEffect","citySelector","Sheffield","London","Edinburgh","Object","keys","handleCitySelect","e","city","cityIndex","Dropdown","Item","eventKey","onSelect","className","DropdownButton","title","id","daily","undefined","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3366390f.chunk.js","sourcesContent":["import Card from 'react-bootstrap/Card';\r\n\r\nfunction Day(props) {\r\n\r\n    var ending = \"\"\r\n\r\n    let endingNumber = props.dayDate.toString().slice(-1)\r\n\r\n    switch (endingNumber) {\r\n        case \"1\":\r\n            ending = \"st\"\r\n            break;\r\n        case \"2\":\r\n            ending = \"nd\"\r\n            break;\r\n        case \"3\":\r\n            ending = \"rd\"\r\n            break;\r\n        default:\r\n            ending = \"th\"\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card  style={{ width: '18rem' }}>\r\n                <Card.Body>\r\n                    <h3>{props.dayName} {props.dayDate}{ending}</h3>\r\n                    <p>{props.dayForecast.temp.max} °C high</p>\r\n                    <p>{props.dayForecast.temp.min} °C low</p>\r\n                    <p>{props.dayForecast.wind_speed} kmph winds</p>\r\n                    <p>{props.dayForecast.weather[0].main}</p>\r\n                </Card.Body>\r\n            </Card>\r\n        </>\r\n\r\n    );\r\n\r\n}\r\nexport default Day;","import Day from './Day'\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nfunction Forecast(props) {\r\n\r\n    const date = new Date();\r\n\r\n    var displayForecast = (<></>)\r\n\r\n    if (props.forecast)\r\n    displayForecast = props.forecast.map((day, dayIndex) =>\r\n        < Day key={dayIndex} dayForecast={day} dayDate={date.getDate() + dayIndex} dayName={props.nextEightDayNames[dayIndex] } />\r\n    );\r\n\r\n    return (\r\n        <>\r\n        <h2>7 Day Forecast for {props.chosenCity}</h2>\r\n            <Container>\r\n                {displayForecast}\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Forecast","import './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Forecast from './Forecast'\r\nimport axios from \"axios\";\r\nimport 'react-bootstrap'\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\n//let vaidCall = \"https://api.openweathermap.org/data/2.5/onecall?lat=53.38&lon=1.47&exclude=current,minutely,hourly,alerts&appid=49bb050875cb1db5d0c044d423eb3c5c\"\r\n\r\nconst APIkey = \"49bb050875cb1db5d0c044d423eb3c5c\"\r\n\r\nvar cities = {\r\n  Sheffield:\r\n    { lat: 53.38, lon: 1.47 },\r\n  London:\r\n    { lat: 51.50, lon: 0.12 },\r\n  Edinburgh:\r\n    { lat: 55.95, lon: 3.18 },\r\n}\r\n\r\nconst chosenCity = \"Sheffield\";\r\n\r\nconst dayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\r\nconst date = new Date();\r\nconst todayDayName = dayNames[date.getDay()];\r\nconst eightDayNames = dayNames.slice(date.getDay()).concat(dayNames.slice(0, date.getDay() + 1)) //logic error?\r\n\r\n\r\n// var weather = {}\r\n// axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${cities[chosenCity].lat}&lon=${cities[chosenCity].lon}&units=metric&exclude=current,minutely,hourly,alerts&appid=${APIkey}`)\r\n// .then(response => {\r\n//   weather = response.data\r\n// })\r\n// .catch(error => console.error(error))\r\n\r\nfunction App() {\r\n\r\n  const [chosenCity, setValue] = useState('Sheffield');\r\n\r\n  const [weather, changeWeather] = useState(\r\n    {}\r\n  );\r\n\r\n  const [fetching, changeFetching] = useState(false);\r\n\r\n  const updateWeather = (responseObject) => {\r\n    changeWeather(\r\n      responseObject\r\n    )\r\n  };\r\n\r\n  const responseStatusCheck = (responseObject) => {\r\n    if (responseObject.status >= 200 && responseObject.status < 300) {\r\n      return Promise.resolve(responseObject);\r\n    }\r\n    else {\r\n      return Promise.reject(new Error(responseObject.statusText))\r\n    }\r\n  }\r\n\r\n  const refreshWeather = () => {\r\n    changeFetching(true);\r\n\r\n    axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${cities[chosenCity].lat}&lon=${cities[chosenCity].lon}&units=metric&exclude=current,minutely,hourly,alerts&appid=${APIkey}`)\r\n      .then(responseStatusCheck)\r\n      .then((jsonResponse) => {\r\n        updateWeather(jsonResponse.data)\r\n      })\r\n      .catch((error) => { console.log(error) })\r\n      .finally((state) => changeFetching(false));\r\n  }\r\n\r\n  useEffect(() => {\r\n    refreshWeather();\r\n  }\r\n    , []);\r\n\r\n\r\n  var citySelector = (<></>)\r\n\r\n  // citySelector = cities.map((city) =>\r\n  // <Dropdown.Item eventKey={city.stringify()}>{city.stringify()}</Dropdown.Item>\r\n  // );\r\n\r\n  let cities = {\r\n    Sheffield:\r\n      { lat: 53.38, lon: 1.47 },\r\n    London:\r\n      { lat: 51.50, lon: 0.12 },\r\n    Edinburgh:\r\n      { lat: 55.95, lon: 3.18 },\r\n  }\r\n\r\n  console.log(Object.keys(cities))    //being called 3 times per selection\r\n\r\n  const handleCitySelect = (e) => {\r\n    setValue(e);\r\n      refreshWeather();\r\n  }\r\n\r\n  citySelector = Object.keys(cities).map((city, cityIndex) =>\r\n    < Dropdown.Item eventKey={Object.keys(cities)[cityIndex]} onSelect={handleCitySelect}\r\n    >\r\n      {Object.keys(cities)[cityIndex]}\r\n    </Dropdown.Item>\r\n  );\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n\r\n        <DropdownButton\r\n          title=\"Select City\"\r\n          id=\"dropdown-menu-align-right\"\r\n          onSelect={handleCitySelect}\r\n        >\r\n          {citySelector}\r\n        </DropdownButton>\r\n\r\n\r\n        <Forecast chosenCity={chosenCity} forecast={weather.daily ? weather.daily : undefined} nextEightDayNames={eightDayNames} />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}